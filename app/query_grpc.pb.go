// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: query.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryInterfaceClient is the client API for QueryInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryInterfaceClient interface {
	QueryMetric(ctx context.Context, in *MetricQuery, opts ...grpc.CallOption) (*MetricReply, error)
	UpdateRoutes(ctx context.Context, in *RouteUpdate, opts ...grpc.CallOption) (*RouteReply, error)
}

type queryInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryInterfaceClient(cc grpc.ClientConnInterface) QueryInterfaceClient {
	return &queryInterfaceClient{cc}
}

func (c *queryInterfaceClient) QueryMetric(ctx context.Context, in *MetricQuery, opts ...grpc.CallOption) (*MetricReply, error) {
	out := new(MetricReply)
	err := c.cc.Invoke(ctx, "/dynproto.query.QueryInterface/query_metric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryInterfaceClient) UpdateRoutes(ctx context.Context, in *RouteUpdate, opts ...grpc.CallOption) (*RouteReply, error) {
	out := new(RouteReply)
	err := c.cc.Invoke(ctx, "/dynproto.query.QueryInterface/update_routes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryInterfaceServer is the server API for QueryInterface service.
// All implementations must embed UnimplementedQueryInterfaceServer
// for forward compatibility
type QueryInterfaceServer interface {
	QueryMetric(context.Context, *MetricQuery) (*MetricReply, error)
	UpdateRoutes(context.Context, *RouteUpdate) (*RouteReply, error)
	mustEmbedUnimplementedQueryInterfaceServer()
}

// UnimplementedQueryInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryInterfaceServer struct {
}

func (UnimplementedQueryInterfaceServer) QueryMetric(context.Context, *MetricQuery) (*MetricReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMetric not implemented")
}
func (UnimplementedQueryInterfaceServer) UpdateRoutes(context.Context, *RouteUpdate) (*RouteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutes not implemented")
}
func (UnimplementedQueryInterfaceServer) mustEmbedUnimplementedQueryInterfaceServer() {}

// UnsafeQueryInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryInterfaceServer will
// result in compilation errors.
type UnsafeQueryInterfaceServer interface {
	mustEmbedUnimplementedQueryInterfaceServer()
}

func RegisterQueryInterfaceServer(s grpc.ServiceRegistrar, srv QueryInterfaceServer) {
	s.RegisterService(&QueryInterface_ServiceDesc, srv)
}

func _QueryInterface_QueryMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryInterfaceServer).QueryMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynproto.query.QueryInterface/query_metric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryInterfaceServer).QueryMetric(ctx, req.(*MetricQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryInterface_UpdateRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryInterfaceServer).UpdateRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynproto.query.QueryInterface/update_routes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryInterfaceServer).UpdateRoutes(ctx, req.(*RouteUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryInterface_ServiceDesc is the grpc.ServiceDesc for QueryInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynproto.query.QueryInterface",
	HandlerType: (*QueryInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query_metric",
			Handler:    _QueryInterface_QueryMetric_Handler,
		},
		{
			MethodName: "update_routes",
			Handler:    _QueryInterface_UpdateRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}
