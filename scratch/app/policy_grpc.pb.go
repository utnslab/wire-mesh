// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: policy.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyInterfaceClient is the client API for PolicyInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyInterfaceClient interface {
	Update(ctx context.Context, in *BatchUpdate, opts ...grpc.CallOption) (*UpdateReply, error)
}

type policyInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyInterfaceClient(cc grpc.ClientConnInterface) PolicyInterfaceClient {
	return &policyInterfaceClient{cc}
}

func (c *policyInterfaceClient) Update(ctx context.Context, in *BatchUpdate, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/dynproto.policy.PolicyInterface/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyInterfaceServer is the server API for PolicyInterface service.
// All implementations must embed UnimplementedPolicyInterfaceServer
// for forward compatibility
type PolicyInterfaceServer interface {
	Update(context.Context, *BatchUpdate) (*UpdateReply, error)
	mustEmbedUnimplementedPolicyInterfaceServer()
}

// UnimplementedPolicyInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyInterfaceServer struct {
}

func (UnimplementedPolicyInterfaceServer) Update(context.Context, *BatchUpdate) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPolicyInterfaceServer) mustEmbedUnimplementedPolicyInterfaceServer() {}

// UnsafePolicyInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyInterfaceServer will
// result in compilation errors.
type UnsafePolicyInterfaceServer interface {
	mustEmbedUnimplementedPolicyInterfaceServer()
}

func RegisterPolicyInterfaceServer(s grpc.ServiceRegistrar, srv PolicyInterfaceServer) {
	s.RegisterService(&PolicyInterface_ServiceDesc, srv)
}

func _PolicyInterface_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyInterfaceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynproto.policy.PolicyInterface/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyInterfaceServer).Update(ctx, req.(*BatchUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyInterface_ServiceDesc is the grpc.ServiceDesc for PolicyInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynproto.policy.PolicyInterface",
	HandlerType: (*PolicyInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _PolicyInterface_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}
